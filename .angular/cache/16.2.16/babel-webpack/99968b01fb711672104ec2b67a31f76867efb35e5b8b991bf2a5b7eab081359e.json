{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./oauth2.service\";\nexport let CallbackOauth2Component = /*#__PURE__*/(() => {\n  class CallbackOauth2Component {\n    constructor(route, oauth2, router) {\n      this.route = route;\n      this.oauth2 = oauth2;\n      this.router = router;\n    }\n    /**\n     * La acción inicial es obtener los parametros que envia el servidor de autorización y en base a estos\n     * obtener un token, posteriormente redirecciona a la pantalla solicitada por el usuario\n     */\n    ngOnInit() {\n      let redirect = localStorage.getItem('pageRedirect');\n      this.pageRedirect = redirect ? redirect : \"/\";\n      this.route.queryParams.subscribe(params => {\n        /**\n         * Cuando obtiene código y token procede a guardarlo y redirecciona a la página inicialmente solicitada\n         * En caso contrario mostrará el contenido de la pagina callback-oauth2\n         */\n        if (params['code']) {\n          this.oauth2.getToken(params['code'], window.location.href.split('?')[0], params['scope']).subscribe(data => {\n            /**\n             * Obtiene token y lo almacena\n             */\n            let token = data;\n            if (token && token.access_token) {\n              CallbackOauth2Component.setStorageToken(token.access_token, token.refresh_token, token.expires_in);\n            }\n            /**\n            * Redirecciona a la pantalla solicitada por el usuario\n            */\n            this.router.navigate([redirect]);\n          });\n        }\n      });\n    }\n    /**\n    * Remueve el token si existe, asigna los nuevos valores y la fecha hora de obtención del token\n    */\n    static setStorageToken(access_token, refresh_token, expires_in) {\n      CallbackOauth2Component.cleanStorageToken();\n      localStorage.setItem(\"accessToken\", access_token);\n      localStorage.setItem(\"refreshToken\", refresh_token);\n      localStorage.setItem(\"expiresIn\", expires_in.toString());\n      localStorage.setItem(\"dateTimeToken\", Date.now().toString());\n    }\n    /**\n     * Remueve los datos del token almacenados\n     */\n    static cleanStorageToken() {\n      localStorage.removeItem(\"accessToken\");\n      localStorage.removeItem(\"refreshToken\");\n      localStorage.removeItem(\"expiresIn\");\n      localStorage.removeItem(\"dateTimeToken\");\n    }\n    static {\n      this.ɵfac = function CallbackOauth2Component_Factory(t) {\n        return new (t || CallbackOauth2Component)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Oauth2Service), i0.ɵɵdirectiveInject(i1.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: CallbackOauth2Component,\n        selectors: [[\"app-callback-oauth2\"]],\n        decls: 5,\n        vars: 1,\n        consts: [[1, \"message-callback\"], [3, \"routerLink\"]],\n        template: function CallbackOauth2Component_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"p\", 0);\n            i0.ɵɵtext(1, \"No fue posible obtener autorizaci\\u00F3n, presione \");\n            i0.ɵɵelementStart(2, \"a\", 1);\n            i0.ɵɵtext(3, \"aqu\\u00ED\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(4, \" para intentar de nuevo\");\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(2);\n            i0.ɵɵpropertyInterpolate(\"routerLink\", ctx.pageRedirect);\n          }\n        },\n        dependencies: [i1.RouterLink],\n        encapsulation: 2\n      });\n    }\n  }\n  return CallbackOauth2Component;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}