{"ast":null,"code":"import { BrowserModule } from '@angular/platform-browser';\nimport { ErrorHandler } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MaterialModule } from './material.module';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { GlobalErrorHandler } from './comun/dialogs/message/global-error-handler';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { CacheInterceptor } from './comun/interceptors/cache/cache.interceptor';\nimport { AuthInterceptor } from './comun/interceptors/auth/auth.interceptor';\nimport { ErrorInterceptor } from './comun/interceptors/error/error.interceptor';\nimport { concat, interval } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { SubmenusModule } from './submenus/submenus.module';\nimport { PaisesModule } from './paises/paises.module';\nimport { AduanasModule } from './aduanas/aduanas.module';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/service-worker\";\nexport let AppModule = /*#__PURE__*/(() => {\n  class AppModule {\n    constructor(updates, appRef) {\n      this.updates = updates;\n      this.appRef = appRef;\n      this.updateVersion();\n      this.checkPeriodicalUpdate();\n    }\n    /**\n     * Metodo para validar si hay actualizaciones de la aplicación de angular\n     * este se ejecuta cada 6 horas\n     */\n    checkPeriodicalUpdate() {\n      if (this.updates.isEnabled) {\n        const appIsStable = this.appRef.isStable.pipe(first(isStable => isStable === true));\n        const everyNHours = interval(6 * 60 * 60 * 1000);\n        const everyHoursAppIsStable = concat(appIsStable, everyNHours);\n        everyHoursAppIsStable.subscribe(() => {\n          console.log(\"Buscando actualizaciones\");\n          this.updates.checkForUpdate();\n        });\n      }\n    }\n    /**\n     * Valida si hay una versión disponible de la aplicación de angular\n     * Muestra un mensaje al usuario para realizar la actualización\n     */\n    updateVersion() {\n      if (this.updates.isEnabled) {\n        this.updates.available.subscribe(event => {\n          console.log('Nueva versión disponible: ', event.available.hash);\n          this.updates.activateUpdate().then(() => document.location.reload());\n          /*const snack = this.snackBar.open(`Nueva versión ${event.available.hash}`, 'Actualizar');\n          snack.onAction().subscribe(()=>{\n            this.updates.activateUpdate().then(() => document.location.reload());\n          });*/\n        });\n\n        this.updates.activated.subscribe(event => {\n          console.log('Actualizada de la versión ', event.previous?.hash, ' a ', event.current.hash);\n        });\n      }\n    }\n    static {\n      this.ɵfac = function AppModule_Factory(t) {\n        return new (t || AppModule)(i0.ɵɵinject(i1.SwUpdate), i0.ɵɵinject(i0.ApplicationRef));\n      };\n    }\n    static {\n      this.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n        type: AppModule,\n        bootstrap: [AppComponent]\n      });\n    }\n    static {\n      this.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n        providers: [{\n          provide: ErrorHandler,\n          useClass: GlobalErrorHandler\n        }, {\n          provide: HTTP_INTERCEPTORS,\n          useClass: CacheInterceptor,\n          multi: true\n        }, {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AuthInterceptor,\n          multi: true\n        }, {\n          provide: HTTP_INTERCEPTORS,\n          useClass: ErrorInterceptor,\n          multi: true\n        }],\n        imports: [BrowserModule, AppRoutingModule, BrowserAnimationsModule, MaterialModule, HttpClientModule, ServiceWorkerModule.register('ngsw-worker.js', {\n          enabled: environment.production,\n          // Register the ServiceWorker as soon as the app is stable\n          // or after 30 seconds (whichever comes first).\n          registrationStrategy: 'registerWhenStable:30000'\n        }), SubmenusModule, PaisesModule, AduanasModule]\n      });\n    }\n  }\n  return AppModule;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}