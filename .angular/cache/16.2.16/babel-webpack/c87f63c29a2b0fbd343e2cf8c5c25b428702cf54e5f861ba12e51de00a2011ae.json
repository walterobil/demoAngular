{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./request-cache.service\";\nexport let CacheInterceptor = /*#__PURE__*/(() => {\n  class CacheInterceptor {\n    constructor(cache) {\n      this.cache = cache;\n    }\n    intercept(req, next) {\n      /**\n       * Solo las peticiones con metodo GET y que son registradas o por medio del\n       * header se guardan en cache\n       */\n      if (this.cache.isCacheable(req)) {\n        let cachedResponse = this.cache.get(req.url, req.headers);\n        return cachedResponse ? of(cachedResponse) : this.sendRequest(req, next);\n      }\n      /**\n       * Si no es metodo GET o no se solicita guardar en cache realiza la peticion sin guardar el resultado\n       */\n      return this.sendRequest(req, next);\n    }\n    /**\n     * Realiza la peticion y guarda en cache el resultado\n     * @param req\n     * @param next\n     */\n    sendRequest(req, next) {\n      return next.handle(req).pipe(tap(event => this.cache.set(req.url, event, new Date())));\n    }\n    static {\n      this.ɵfac = function CacheInterceptor_Factory(t) {\n        return new (t || CacheInterceptor)(i0.ɵɵinject(i1.RequestCacheService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CacheInterceptor,\n        factory: CacheInterceptor.ɵfac\n      });\n    }\n  }\n  return CacheInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}