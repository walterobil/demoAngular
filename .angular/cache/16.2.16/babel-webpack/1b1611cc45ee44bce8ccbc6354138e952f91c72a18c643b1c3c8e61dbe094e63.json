{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, finalize } from 'rxjs/operators';\nimport { CallbackOauth2Component } from '../../callback-oauth2/callback-oauth2.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/comun/dialogs/message/message.service\";\nimport * as i2 from \"src/app/comun/dialogs/load/load.service\";\nexport let ErrorInterceptor = /*#__PURE__*/(() => {\n  class ErrorInterceptor {\n    constructor(errorService, loadService) {\n      this.errorService = errorService;\n      this.loadService = loadService;\n    }\n    /**\n     * Interceptor para ventana de espera de respuesta de la petición\n     * y manejo de mensajes de error\n     * @param request\n     * @param next\n     */\n    intercept(request, next) {\n      this.loadService.openDialog();\n      return next.handle(request).pipe(catchError(htterror => {\n        let errorMessage;\n        let errorRes;\n        let status;\n        if (htterror.error instanceof ErrorEvent) {\n          errorMessage = htterror.message;\n        } else {\n          errorRes = htterror.error;\n          errorMessage = errorRes.userMessage;\n          status = htterror.status;\n          /**\n           * Cuando el error es por token invalido se debe a que la sesión fue cerrada o el token expiró\n           * Se limpia la información del token y se redirecciona para volver al guard y obtener nuevo token\n           */\n          if (status === 401 && htterror.error && htterror.error.error && htterror.error.error === \"invalid_token\" && localStorage.getItem(\"guard\") && localStorage.getItem(\"guard\") === \"Authorization\") {\n            errorMessage = \"Su sesión ha finalizado\";\n            CallbackOauth2Component.cleanStorageToken();\n            errorRes.developerMessage = \"invalid_token\";\n            //this.errorService.openDialog(\"Aviso\",errorMessage, errorRes, status);\n            window.location.href = window.location.href;\n            //return throwError(htterror);\n            return throwError(\"Reiniciando\");\n          }\n        }\n        errorMessage = this.getDefaultMessage(errorMessage, status);\n        this.errorService.openDialog(\"Error\", errorMessage, errorRes, status);\n        return throwError(htterror);\n      }), finalize(() => {\n        this.loadService.hideDialog();\n      }));\n    }\n    /**\n     * Mensaje de error por defecto en base al código de respuesta http\n     * @param errorMessage Mensaje de texto capturado\n     * @param status codigo de error http\n     */\n    getDefaultMessage(errorMessage, status) {\n      let errorMsg = errorMessage;\n      /**\n       * Si hay mensaje de error lo devuelve para ser mostrado\n       * Si no hay mensaje definido coloca alguno por defecto en base al status\n       */\n      if (errorMsg) {\n        return errorMsg;\n      }\n      /**\n       * Si el status es 0 no tiene conexión a internet\n       */\n      if (status === 0) {\n        return \"Sin conexión\";\n      }\n      /**\n       * Si el error no es por token invalido solo se muestra error de acceso no autorizado\n       */else if (status === 401) {\n        return \"Acceso no autorizado\";\n      }\n      /**\n       * Servicio no existe\n       */else if (status === 404) {\n        return \"No se encuentra la ruta solicitada\";\n      }\n      /**\n       * Servicio no existe\n       */else if (status === 502) {\n        return \"Servicio solicitado no es válido\";\n      }\n      /**\n       * Servicio no está disponible temporalmente\n       */else if (status === 503) {\n        return \"Servicio no disponible, por favor intente en unos segundos\";\n      }\n      /**\n       * Tiempo de respuesta excedido, la petición demora demasiado en responder\n       */else if (status === 504) {\n        return \"La operación ha demorado demasiado, por favor espere unos segundos y verifique si se completó\";\n      } else {\n        return \"Error desconocido\";\n      }\n    }\n    static {\n      this.ɵfac = function ErrorInterceptor_Factory(t) {\n        return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.MessageService), i0.ɵɵinject(i2.LoadService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ErrorInterceptor,\n        factory: ErrorInterceptor.ɵfac\n      });\n    }\n  }\n  return ErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}