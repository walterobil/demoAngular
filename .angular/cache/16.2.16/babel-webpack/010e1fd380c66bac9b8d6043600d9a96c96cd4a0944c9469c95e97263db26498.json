{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nexport let RequestCacheService = /*#__PURE__*/(() => {\n  class RequestCacheService {\n    constructor() {\n      /**\n       * Listado de URLs que se guardaran en cache\n       */\n      this.urlServiceCache = [\n        /*'/api/contexto/path/5/parametros?sort=id,asc',\n        '/api/contexto/parametros/10'*/\n      ];\n      /**\n       * Tiempo de expiración en milisegundos\n       * -1 Nunca expira\n       */\n      this.expiry = -1;\n      /**\n       * Valida si existe la variable accessToken en sesion\n       * true = valida, false = no valida\n       */\n      this.validAccessToken = environment.seguridad;\n      /**\n       * Respuesta en cache\n       */\n      this.cache = new Map();\n    }\n    /**\n     * Retorna nulo cuando no se tiene en cache\n     * @param url URL del servicio origen\n     */\n    get(url, headers) {\n      let result = this.cache.get(url);\n      if (result) {\n        let response = result.response;\n        /**\n         * Si el resultado esta en cache pero ya expiro o la sesion del token esta vacia\n         * o si se solicita resetear el cache por medio del header cache-response entonces se borra\n         */\n        if (this.isExpired(result.date) || headers.get(\"cache-response\") && headers.get(\"cache-response\") === 'false' || this.validAccessToken && !localStorage.getItem(\"accessToken\")) {\n          return this.delete(url);\n        }\n        /**\n         * Retorna el valor en cache\n         */\n        return response;\n      }\n      /**\n       * Si no hay valor en cache retorna nulo\n       */\n      return null;\n    }\n    /**\n     * Determina si ya expiro el tiempo de cache, valor -1 nunca expira\n     * @param setDate Fecha que se guarda desde el primer registro en cache\n     */\n    isExpired(setDate) {\n      if (this.expiry === -1) {\n        return false;\n      }\n      return Date.now() - setDate.getTime() > this.expiry;\n    }\n    /**\n     * Guarda en cache el resultado del servicio\n     * @param url URL del servicio origen\n     * @param response Respuesta del servicio\n     * @param date Fecha hora de la primer peticion\n     */\n    set(url, response, date) {\n      this.cache.set(url, {\n        response: response,\n        date: date\n      });\n    }\n    /**\n     * Limpia cache\n     * @param url URL del servicio a limpiar cache\n     */\n    delete(url) {\n      this.cache.delete(url);\n      return null;\n    }\n    /**\n     * Buscar la ruta en el arreglo para determinar si debe guardar en cache\n     * @param serviceUri Arreglo de URL en cache\n     */\n    existUrlServiceCache(serviceUri) {\n      return this.urlServiceCache.indexOf(serviceUri) > -1;\n    }\n    /**\n     * Valida si es un metodo GET y si esta registrada la ruta para guardarse en cache\n     * o se solicita por medio del header cache-response\n     * @param req Peticion origen\n     */\n    isCacheable(req) {\n      let pathUrl = this.getPathUrl(req.urlWithParams);\n      if (req.method === 'GET' && (req.headers.get(\"cache-response\") && (req.headers.get(\"cache-response\") === 'true' || req.headers.get(\"cache-response\") === 'false') || this.existUrlServiceCache(pathUrl))) {\n        return true;\n      }\n      return false;\n    }\n    /**\n     * Remueve del path el dominio o host de la petición origen\n     * @param url Contexto y path del request\n     */\n    getPathUrl(url) {\n      return url.replace(/http(s)?:\\/\\/[\\w:\\/\\/](([\\w][\\w]*[\\w]|[\\w])\\.)*[\\w][\\w]{1,61}[\\w]\\.[\\w]{2,}/, \"\");\n    }\n    static {\n      this.ɵfac = function RequestCacheService_Factory(t) {\n        return new (t || RequestCacheService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: RequestCacheService,\n        factory: RequestCacheService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return RequestCacheService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}